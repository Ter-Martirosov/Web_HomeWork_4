{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA,iBAAiB,qBAAqB,MAAM,qBAAqB;AACjE;AACA,cAAc,eAAe;AAC7B;AACA,UAAU;AACV;AACA;AACA,qBAAqB,uBAAuB,MAAM,uBAAuB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,iEAAe,YAAY;;;;;;;;;;;;;;;ACxC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA,iEAAe,YAAY;;;;;;;;;;;;;;;AC3C3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,iBAAiB,oCAAoC;AACrD,KAAK;AACL;AACA;AACA;AACA;AACA,iEAAe,QAAQ;;;;;;;;;;;;;;;AChCvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA,iEAAe,QAAQ;;;;;;;;;;;;;;;ACrCvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,QAAQ;;;;;;;UCnEvB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;ACNA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAE6C;AACR;AACA;AACQ;AACR;;AAErC;AACA,EAAE,6DAAY;AACd,EAAE,0DAAQ;AACV,EAAE,0DAAQ;AACV,EAAE,8DAAY;AACd,EAAE,0DAAQ;AACV,CAAC","sources":["webpack://homework_4/./assets/js/modules/carousel.js","webpack://homework_4/./assets/js/modules/features.js","webpack://homework_4/./assets/js/modules/form.js","webpack://homework_4/./assets/js/modules/tabs.js","webpack://homework_4/./assets/js/modules/time.js","webpack://homework_4/webpack/bootstrap","webpack://homework_4/webpack/runtime/define property getters","webpack://homework_4/webpack/runtime/hasOwnProperty shorthand","webpack://homework_4/webpack/runtime/make namespace object","webpack://homework_4/./assets/js/homework.js"],"sourcesContent":["const carouselFunc = () => {\r\n  // Задание 4\r\n\r\n  const getResouse = async (url) => {\r\n    const response = await fetch(url)\r\n    return response.json() // возвращаем промис\r\n  }\r\n\r\n  function cardContent(mass) {\r\n    // Создаем функцию, которая в соответствии с каждым обьектом из входного массива создет внутри carousel__wrapper div'ы\r\n    // с классом carousel__item\r\n    const carousel = document.querySelector(\".carousel__wrapper\")\r\n\r\n    for (let i = 0; i < mass.length; i++) {\r\n      const carouselItem = document.createElement(\"div\")\r\n      carouselItem.classList.add(\"carousel__item\")\r\n      carouselItem.innerHTML = `\r\n      <img src=${mass[i].cardImg.src} alt=${mass[i].cardImg.alt} />\r\n      <div class=\"carousel__content\">\r\n        <h4>${mass[i].header}</h4>\r\n        <p>\r\n        ${mass[i].descr}\r\n        </p>\r\n        <div class=\"item__last-row\">\r\n          <img src=${mass[i].authorImg.src} alt=${mass[i].authorImg.alt} />\r\n          <div class=\"text-button-pay\">\r\n            <a href=\"#\">Pay <i class=\"fa fa-angle-double-right\"></i></a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      `\r\n      carousel.append(carouselItem)\r\n    }\r\n  }\r\n\r\n  getResouse(\"http://localhost:3000/cards\").then((response) => {\r\n    cardContent(response)\r\n  })\r\n}\r\n\r\nexport default carouselFunc\r\n","const featuresFunc = () => {\r\n  // Задание 1\r\n  /*В первом задании проверка соответствия скрытого контента нужному features-элементу реализована через\r\n    проверку значения соответствующего дата-атрибута. В последующих заданиях я обычно буду проверять\r\n    соответствие через порядковый номер\r\n  */\r\n\r\n  const features = document.querySelectorAll(\".features-content\"),\r\n    content = document.querySelectorAll(\".content-hide\")\r\n\r\n  // Создаем две функции, одна из которых показывает скрытый контент, а другая снова скрывает его\r\n\r\n  function showContent(id) {\r\n    content.forEach((item) => {\r\n      const data = item.getAttribute(\"data-content\")\r\n      if (id === data) {\r\n        item.style.display = \"block\"\r\n      }\r\n    })\r\n  }\r\n\r\n  function hideContent(id) {\r\n    content.forEach((item) => {\r\n      const data = item.getAttribute(\"data-content\")\r\n      if (id === data) {\r\n        item.style.display = \"none\"\r\n      }\r\n    })\r\n  }\r\n\r\n  features.forEach((item) => {\r\n    // Создаем два обработчика событий на наведение курсора мыши на элемент , и на покидание курсора мыши элемента\r\n    item.addEventListener(\"mouseover\", (event) => {\r\n      const itemId = item.getAttribute(\"data-content\")\r\n      showContent(itemId)\r\n    })\r\n    item.addEventListener(\"mouseout\", (event) => {\r\n      const itemId = item.getAttribute(\"data-content\")\r\n      hideContent(itemId)\r\n    })\r\n  })\r\n}\r\n\r\nexport default featuresFunc\r\n","const formFunc = () => {\r\n  const form = document.querySelector(\"#contact\")\r\n  const button = document.querySelector(\"#button\")\r\n\r\n  form.addEventListener(\"submit\", (event) => {\r\n    event.preventDefault()\r\n    const objData = {}\r\n    const formData = new FormData(form)\r\n    formData.forEach((value, key) => {\r\n      objData[key] = value\r\n    })\r\n    postRequest(\"http://localhost:3000/requests\", objData)\r\n      .then((obj) => {\r\n        event.preventDefault()\r\n        form.reset()\r\n        const text = document.createElement(\"div\")\r\n        text.innerHTML = \"<span>Форма успешно отправлена</span>\"\r\n        button.append(text)\r\n      })\r\n      .catch((error) => console.error(\"Ошибка\"))\r\n  })\r\n\r\n  async function postRequest(url, data) {\r\n    const response = await fetch(url, {\r\n      method: \"POST\", // GET, POST, PUT, PATCH, DELETE\r\n      body: JSON.stringify(data),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    })\r\n    return response.json()\r\n  }\r\n}\r\n\r\nexport default formFunc\r\n","const tabsFunc = () => {\r\n  // Задание 2\r\n\r\n  const tabs = document.querySelectorAll(\"[data-tabs]\"),\r\n    tabsContent = document.querySelectorAll(\"#tabs-content\")\r\n\r\n  function hideTabs() {\r\n    // Создаем функцию, которая скрывает все блоки с информацией\r\n    tabsContent.forEach((item) => {\r\n      item.style.display = \"none\"\r\n    })\r\n  }\r\n\r\n  function showTabs(i) {\r\n    // Создаем функцию, которая показывает выбранный блок информации\r\n    tabsContent[i].style.display = \"block\"\r\n  }\r\n\r\n  hideTabs()\r\n  showTabs(0)\r\n  // Скрываем все блоки, кроме первого\r\n\r\n  tabs.forEach((item, index) => {\r\n    // Создаем функцию, которая при нажатии на соответствующий таб выдает нужный блок информации\r\n    item.addEventListener(\"click\", (e) => {\r\n      hideTabs()\r\n      showTabs(index)\r\n      // Нужно также показать, какой из табов сейчас активирован. Делаем это через добавления класса ui-tabs-active нужному табу\r\n      // Соответственно для этого нужно убрать класс активации у всех табов и добавить активированному\r\n      tabs.forEach((el) => {\r\n        el.parentElement.classList.remove(\"ui-tabs-active\")\r\n      })\r\n      item.parentElement.classList.add(\"ui-tabs-active\")\r\n    })\r\n  })\r\n}\r\n\r\nexport default tabsFunc\r\n","const timeFunc = () => {\r\n  // Задание 3\r\n\r\n  const deadline = \"2023-12-31\", // В переменную deadline запишем дату до которой ведется счет\r\n    counter = document.querySelector(\".counter\"),\r\n    days = counter.querySelector(\".days .value\"),\r\n    hours = counter.querySelector(\".hours .value\"),\r\n    minutes = counter.querySelector(\".minutes .value\"),\r\n    seconds = counter.querySelector(\".seconds .value\")\r\n  // находим все необходимые для счетчика элементы в HTML-документе\r\n\r\n  function getTime(time) {\r\n    // Создаем функцию, которая считает разницу между текущем временем и временем дедлайна в миллисекундах, секундах,\r\n    // минутах, часах и днях соответсвенно\r\n    const t = Date.parse(time) - Date.parse(new Date()),\r\n      days = Math.floor(t / (1000 * 60 * 60 * 24)),\r\n      hours = Math.floor((t / (1000 * 60 * 60)) % 24),\r\n      minutes = Math.floor((t / 1000 / 60) % 60),\r\n      seconds = Math.floor((t / 1000) % 60)\r\n\r\n    return {\r\n      total: t,\r\n      days: days,\r\n      hours: hours,\r\n      minutes: minutes,\r\n      seconds: seconds,\r\n    }\r\n  }\r\n\r\n  function getZero(num) {\r\n    // Создаем вспомогательную функцию (для красоты счетчика), которая будет добавлять ноль перед числом, если оно меньше 10\r\n    if (num >= 0 && num < 10) {\r\n      return \"0\" + num\r\n    } else {\r\n      return num\r\n    }\r\n  }\r\n\r\n  function setTime(time) {\r\n    // Функция setTime создает интервал в 1с, которая обновляет счетчик\r\n    const timeInterval = setInterval(updateTime, 1000)\r\n\r\n    function updateTime() {\r\n      // Функция updateTime заполняет элементы HTML документа значениями полученными из функции getTime\r\n      const t = getTime(time)\r\n\r\n      days.innerHTML = getZero(t.days)\r\n      hours.innerHTML = getZero(t.hours)\r\n      minutes.innerHTML = getZero(t.minutes)\r\n      seconds.innerHTML = getZero(t.seconds)\r\n      console.log(t.total)\r\n\r\n      if (t.total <= 0) {\r\n        // и в том случае, если разница во времени получення в миллисекундах будет меньше или равна нулю\r\n        clearInterval(timeInterval) // мы прекращаем действие интервала\r\n        // и выставляем все значения таймера по 0\r\n        days.innerHTML = getZero(0)\r\n        hours.innerHTML = getZero(0)\r\n        minutes.innerHTML = getZero(0)\r\n        seconds.innerHTML = getZero(0)\r\n      }\r\n    }\r\n  }\r\n\r\n  setTime(deadline)\r\n}\r\n\r\nexport default timeFunc\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*\nЗадания\n\nВ вёрстку можно вносить любые изменения (добавлять классы, дата-артрибуты, id и так далее) без изменения внешнего вида. Нельзя изменять другие JS файлы, подключаемые к HTML\n\n    1.  На первом экране вы видите 3 блока с class=\"features-content\". Они внутри себя содержат <div class=\"content-hide\" ></div>, который\n        содержит необходимую информацию. При наведении курсора на div с class=\"features-content\" сделайте так, чтобы <div class=\"content-hide\" ></div>\n        показывался, а когда уводили курор, то блок с class=\"features-content\" становился предыдущих размеров.\n\n        P.S. Нормально, если при наведении на див с class=\"features-content\" он становится оранжевым - это можно не фиксить\n\n    2.  На втором экране вы видите табы:\n        а) Best Education\n        б) Top Managemen\n        в) Quality Meeting\n        При нажатии на каждый из этих табов (квадратик или название) сайтик должен показывать соответствующий блок информации\n        с нужной фотографией, описанием и заголовком.\n\n        P.S. Сейчас показаны все блоки с описанием\n\n    3. На третьем экране есть отсчёт обратного времени. Сделайте так, чтобы обратный отсчёт был в режиме реального времени (посекундно).\n    В качестве дедлайна (крайней даты) возьмите 31.12.2023\n\n    P.S. Подсказка - в 22_js уроке в проекте Food разбирается, как работать со счётчиком\n\n    4.  На 4-ом экране есть 5 карточек, заполненные информацией. Сделайте так, чтобы верстка подтягивалась и вставлялась в HTML документа\n        из JS, а именно из массива coursesMass. Это значит, в самом HTML не должно быть верстки (вам нужно будет удалить),\n        и она должна вставляться только через JS\n\n*/\n\nimport featuresFunc from \"./modules/features\"\nimport tabsFunc from \"./modules/tabs\"\nimport timeFunc from \"./modules/time\"\nimport carouselFunc from \"./modules/carousel\"\nimport formFunc from \"./modules/form\"\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  featuresFunc()\n  tabsFunc()\n  timeFunc()\n  carouselFunc()\n  formFunc()\n})\n"],"names":[],"sourceRoot":""}